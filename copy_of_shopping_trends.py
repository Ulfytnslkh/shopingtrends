# -*- coding: utf-8 -*-
"""Copy of Shopping_Trends.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E8Zzzzmt5isoQOUoCG_OWpI1dNU-pS80

#Nama Anggota Kelompok
1. Ulfiyatun solekha 23.11.5708
2. Laila Nurani 23.11.5740
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('shopping_trends.csv')
df.head(10)

"""##Data Collection

"""

#mengetahui jumlah data dan kolom
df.shape

#menampilkan kolom
df.columns

#cek info
df.info()

#menampilkan deskripsi statistik
df.describe()

"""##Visualisasi Data

"""

#Visualisasi Histogram Purchase Amount
plt.hist(df['Purchase Amount (USD)'], bins=30)
plt.title('Histogram Purchase Amount')
plt.xlabel('Purchase Amount (USD)')
plt.ylabel('Frequency')
plt.show()

#Visualisasi Heatmap Korelasi - Semua variabel Numerik
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.title('Heatmap Korelasi - Semua Variabel Numerik')
plt.show()

#visualisasi scater plot Review Rating & Purchase Amount
sns.scatterplot(x='Review Rating', y='Purchase Amount (USD)', data=df)
plt.title('Review Rating vs Purchase Amount')
plt.xlabel('Review Rating')
plt.ylabel('Purchase Amount (USD)')
plt.show()

"""##Dashboard Shopping Trends

"""

import seaborn as sns
import matplotlib.pyplot as plt

# Line chart alternatif
df['Purchase Amount (USD)'].plot(kind='line')
plt.title('Trend Pembelian')
plt.show()

# Bar chart alternatif
sns.countplot(x='Review Rating', data=df)
plt.title('Distribusi Rating')
plt.show()

"""##Analisis Korelasi"""

#Analisis korelasi variabel Age & Purchase Amount
df[['Age', 'Purchase Amount (USD)']].corr() #tidak memiliki korelasi

#nilai korelasi antar variabel Review rating dan Purchase Amount
df[['Review Rating', 'Purchase Amount (USD)']].corr() # tidak memiliki korelasi

#nilai Korelasi antar variabel Age & Previous Purchases
df[['Age', 'Previous Purchases']].corr() #tidak memiliki korelasi

"""##Model Regresi Linier"""

#Regresi Linier Sederhana
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Data
X = df[['Review Rating']]
y = df['Purchase Amount (USD)']

# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model
model = LinearRegression()
model.fit(X_train, y_train)

# Evaluasi
y_pred = model.predict(X_test)
print("MSE:", mean_squared_error(y_test, y_pred))
print("R2 Score:", r2_score(y_test, y_pred))

#Regresi Linier Berganda
X_multi = df[['Age', 'Review Rating', 'Previous Purchases']]
y_multi = df['Purchase Amount (USD)']

X_train_m, X_test_m, y_train_m, y_test_m = train_test_split(X_multi, y_multi, test_size=0.2, random_state=42)

model_multi = LinearRegression()
model_multi.fit(X_train_m, y_train_m)

y_pred_m = model_multi.predict(X_test_m)
print("MSE:", mean_squared_error(y_test_m, y_pred_m))
print("R2 Score:", r2_score(y_test_m, y_pred_m))

import pickle

# Asumsikan df adalah DataFrame hasil EDA kamu
# Simpan df ke file .sav
with open('shopping_data_cleaned.sav', 'wb') as file:
    pickle.dump(df, file)

print("DataFrame berhasil disimpan ke shopping_data_cleaned.sav")